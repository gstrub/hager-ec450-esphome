import esphome.codegen as cg
import esphome.config_validation as cv
from esphome.components import sensor, uart

from esphome.const import (
    CONF_APPARENT_POWER,
    CONF_CURRENT,
    CONF_ENERGY,
    CONF_ID,
    CONF_INTERNAL,
    CONF_NAME,
    CONF_POWER,
    CONF_POWER_FACTOR,
    CONF_REACTIVE_POWER,
    CONF_VOLTAGE,
    DEVICE_CLASS_APPARENT_POWER,
    DEVICE_CLASS_CURRENT,
    DEVICE_CLASS_ENERGY,
    DEVICE_CLASS_POWER,
    DEVICE_CLASS_POWER_FACTOR,
    DEVICE_CLASS_REACTIVE_POWER,
    DEVICE_CLASS_VOLTAGE,
    STATE_CLASS_MEASUREMENT,
    STATE_CLASS_TOTAL_INCREASING,
    UNIT_AMPERE,
    UNIT_VOLT,
    UNIT_VOLT_AMPS,
    UNIT_VOLT_AMPS_REACTIVE,
    UNIT_WATT,
    UNIT_WATT_HOURS,
)

DEPENDENCIES = ["uart"]

ec450_ns = cg.esphome_ns.namespace("ec450")
EC450 = ec450_ns.class_(
    "EC450", cg.Component, uart.UARTDevice
)

CONF_ENABLE = "enable"
CONF_CT1 = "ct1"
CONF_CT2 = "ct2"
CONF_CT3 = "ct3"
CONF_CT4 = "ct4"
CONF_CT5 = "ct5"

def make_ct_schema(ct_name):
    return (cv.Schema(
        {
            cv.Optional(CONF_ENABLE, default="true") : cv.boolean,
            cv.Optional(CONF_NAME, default=ct_name.upper()) : cv.string,
            cv.Optional(CONF_CURRENT, default={CONF_ID: "ec450_" + ct_name + "_current", CONF_INTERNAL: "False"}): sensor.sensor_schema(
                    unit_of_measurement=UNIT_AMPERE,
                    accuracy_decimals=2,
                    device_class=DEVICE_CLASS_CURRENT,
                    state_class=STATE_CLASS_MEASUREMENT,
                ),
            cv.Optional(CONF_POWER, default={CONF_ID: "ec450_" + ct_name + "_power"}): sensor.sensor_schema(
                    unit_of_measurement=UNIT_WATT,
                    accuracy_decimals=2,
                    device_class=DEVICE_CLASS_POWER,
                    state_class=STATE_CLASS_MEASUREMENT,
                ),
            cv.Optional(CONF_ENERGY, default={CONF_ID: "ec450_" + ct_name + "_energy"}): sensor.sensor_schema(
                    unit_of_measurement=UNIT_WATT_HOURS,
                    accuracy_decimals=2,
                    device_class=DEVICE_CLASS_ENERGY,
                    state_class=STATE_CLASS_TOTAL_INCREASING,
                ),
        }
    ))

CONFIG_SCHEMA = (
    cv.Schema(
        {
            cv.GenerateID(): cv.declare_id(EC450),
            cv.Optional(
                CONF_VOLTAGE, 
                default={ CONF_NAME: "Voltage", CONF_ID:"ec450_voltage"}
            ): sensor.sensor_schema(
                unit_of_measurement=UNIT_VOLT,
                accuracy_decimals=2,
                device_class=DEVICE_CLASS_VOLTAGE,
                state_class=STATE_CLASS_MEASUREMENT,
            ),
            cv.Optional(CONF_CT1, default={}): make_ct_schema("ct1"),
            cv.Optional(CONF_CT2, default={}): make_ct_schema("ct2"),
            cv.Optional(CONF_CT3, default={}): make_ct_schema("ct3"),
            cv.Optional(CONF_CT4, default={}): make_ct_schema("ct4"),
            cv.Optional(CONF_CT5, default={}): make_ct_schema("ct5"),
        }
    )
    .extend(cv.COMPONENT_SCHEMA)
    .extend(uart.UART_DEVICE_SCHEMA)
)

async def to_code(config):
    var = cg.new_Pvariable(config[CONF_ID])
    await cg.register_component(var, config)
    await uart.register_uart_device(var, config)

    voltage_sensor = await sensor.new_sensor(config.get(CONF_VOLTAGE))
    cg.add(var.set_voltage_sensor(voltage_sensor))

    for i in range(0,5):
        ct_config = config["ct"+str(i+1)]

        if (not ct_config[CONF_ENABLE]):
            continue
        # Autogenerated ? then create new name
        if (str(ct_config[CONF_CURRENT][CONF_NAME]) == str(ct_config[CONF_CURRENT][CONF_ID])):
            ct_config[CONF_CURRENT][CONF_NAME] = ct_config[CONF_NAME] + " Current"

        ct_config[CONF_CURRENT][CONF_INTERNAL] = False
        current_sensor = await sensor.new_sensor(ct_config.get(CONF_CURRENT))
        cg.add(var.set_current_sensor(i, current_sensor))

        # Autogenerated ? then create new name
        if (str(ct_config[CONF_POWER][CONF_NAME]) == str(ct_config[CONF_POWER][CONF_ID])):
            ct_config[CONF_POWER][CONF_NAME] = ct_config[CONF_NAME] + " Power"

        ct_config[CONF_POWER][CONF_INTERNAL] = False
        power_sensor = await sensor.new_sensor(ct_config.get(CONF_POWER))
        cg.add(var.set_power_sensor(i, power_sensor))

        # Autogenerated ? then create new name
        if (str(ct_config[CONF_ENERGY][CONF_NAME]) == str(ct_config[CONF_ENERGY][CONF_ID])):
            ct_config[CONF_ENERGY][CONF_NAME] = ct_config[CONF_NAME] + " Energy"

        ct_config[CONF_ENERGY][CONF_INTERNAL] = False
        energy_sensor = await sensor.new_sensor(ct_config.get(CONF_ENERGY))
        cg.add(var.set_energy_sensor(i, energy_sensor))

        print(ct_config)

